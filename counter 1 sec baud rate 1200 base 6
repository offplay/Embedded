	   title     "assignment3"
	   list      p=16f877a
	   include   "p16f877a.inc"

	__CONFIG _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON & _HS_OSC & _WRT_OFF & _LVP_OFF & _CPD_OFF

; '__CONFIG' directive is used to embed configuration data within .asm file.
; The lables following the directive are located in the respective .inc file.
; See respective data sheet for additional information on configuration word.
; Remember there are TWO underscore characters before the word CONFIG.

;*******************************************************************
;
;  							 assignment2.ASM
;            				Embedded Systems
;
; Description
;    generate a specialised 
;    repetitive timing waveform for a piece of test equipment.
;    .
;
; Method
;    repeating set of cycles.
;
; Version
;    J Bouis    V1.0   November 2013
;******************************************************************* 
;*******************************************************************    
;
; Constant declarations
; =====================
;
#define latch PORTB,2 ; Slave Select (RA5)
#define Data PORTB,0
#define Clock PORTB,1
ClockValue equ d'8'
AAAAA     equ     d'13'           ; comment
BBBBB     equ     b'10101100'     ; comment
CCCCC     equ     h'3F'           ; comment
;
;******************************************************************* 
;*******************************************************************    
;
; Variable declarations  : User RAM area starts at location h'20' for PIC16F877a
; =====================
;
w_temp		equ	h'7D'		; variable used for context saving 
status_temp	equ	h'7E'		; variable used for context saving
pclath_temp	equ	h'7F'		; variable used for context saving
delcnt 	EQU 0x29 
delcnt2	EQU 0x35				; Counter variable - sent to SPI
var 	EQU 0x30 				; Delay Variable (low byte)
var1 EQU 0x31
var2	 EQU 0x32  				; Delay Variable (high byte)
add equ 0x33
a equ 0x34
c equ 0x37

;variable1       equ     h'20'
;variable2       equ     h'21'
; My variable declaration
presses     equ   h'20'        ; used for switch debounce
;delcnt      equ   h'21'        ; parameter register for del500us routine
count       equ   h'22'
count2      equ   h'23'
flag1		equ	  h'24'
flag2		equ   h'25'	
variable1	equ   h'26'
variable2   equ   h'27'
compare     equ   h'28'
flagtest		equ   d'0'
;
;*******************************************************************
;******************************************************************* 
; Initial system vector.
;   
	org     h'00'                   ; initialise system restart vector
	clrf 	STATUS
	clrf 	PCLATH			; needed for TinyBootloader functionality
	goto    start

;******************************************************************* 
;******************************************************************* 
; interrupt vector
;
	org	h'04'
	goto	int_routine

;******************************************************************* 
;******************************************************************* 
;
; System subroutines.
;  
	org     h'05'           ; start of program space
;
;******************************************************************* 
;******************************************************************* 
; System functions
;******************************************************************* 
;
;* Init : initialise I/O ports and variables
;  ====
; Notes
;      ............................
;
Init    
	bsf     STATUS, RP0        ; enable page 1 register set
	bcf		STATUS, RP1

	movlw	h'07'
	movwf	ADCON1		   ; set PORTA to be digital rather than analogue

	movlw   b'000001'
	movwf   TRISA              ; set port A  
	movlw   b'00000000'                 
	movwf   TRISB              ; set port B 
	movlw   b'11111111'                 
	movwf   TRISC              ; set port C 
	movlw   b'00000001'                 
	movwf   TRISD              ; set port D 
	bcf     STATUS, RP0        ; back to page 0 register set

		movlw b'00000001'			;
	movwf var
	movlw b'00001100'			; shutdown mode normal operation
	movwf add
	call Send_DT

	movlw b'00001111'
	movwf var
	movlw b'00001001'			; decode mode for 4 digits
	movwf add
	call Send_DT

	movlw b'00000100'
	movwf var
	movlw b'00001011'			; scan on 4 digits
	movwf add
	call Send_DT

	movlw b'00001110'
	movwf var
	movlw b'00001010'			; intensity set up
	movwf add
	call Send_DT

	movlw b'00000000'
	movwf var
	movlw b'00000001'			; set digit 1 to 0
	movwf add
	call Send_DT

	movlw b'00000000'
	movwf var
	movlw b'00000010'			; set digit 2 to 0
	movwf add
	call Send_DT

	movlw b'00000000'
	movwf var
	movlw b'00000011'			; set digit 3 to 0
	movwf add
	call Send_DT

	movlw b'00000000'
	movwf var
	movlw b'00000100'			; set digit 4 to 0
	movwf add
	call Send_DT
;
; initialise program variables
;
;	clrf	variable1          ; ensure that no delay command is active

	return
;******************************************************************* 
;
;  int_routine : routine to handle the single interrupt
;  ===========
; Notes
;      ............................
;
int_routine
	movwf   w_temp            ; save off current W register contents
	movf	STATUS,w          ; move status register into W register
	movwf	status_temp       ; save off contents of STATUS register
	movf	PCLATH,w	  ; move pclath register into w register
	movwf	pclath_temp	  ; save off contents of PCLATH register
;
; Your interrupt code goes HERE
;
	movf	pclath_temp,w	  ; retrieve copy of PCLATH register
	movwf	PCLATH		  ; restore pre-isr PCLATH register contents
	movf    status_temp,w     ; retrieve copy of STATUS register
	movwf	STATUS            ; restore pre-isr STATUS register contents
	swapf   w_temp,f
	swapf   w_temp,w          ; restore pre-isr W register contents
	retfie 
;*******************************************************************    
;
; ****** My own subroutine
delClock				;call = 2us
	movlw	d'160'
	movfw	a
	movlw	d'192'		;+1
	movwf	delcnt		;+1	(4)
del2						
	nop					;+24 (28)
	decfsz	delcnt,f	;+25 (53)
	goto 	del2		;+19 (99)
	decfsz	a,f			;+1
	goto	delClock
return

delClockT
	call delClock
	call delClock
	call delClock
	call delClock
	call delClock
	call delClock
	call delClock
	call delClock
;	call delClock
;	movlw	d'1'
;	movfw	c
;	decfsz  c,f
;	goto delClockT
return

delClock2				;call = 2us
		movlw	d'192'		;+1
	movwf	delcnt2		;+1	(4)
del3						
	nop					;+24 (28)
	decfsz	delcnt2,f	;+25 (53)
	goto 	del3		;+19 (99)
return

Send_DT 
	movlw d'8'
	movwf var1
	movlw d'8'
	movwf var2
loop
	rlf add,f
	btfss STATUS,C
	bcf	Data
	btfsc STATUS,C
	bsf Data
	bsf Clock
	call delClock2
	bcf Clock
	decfsz var1,f
	goto loop
loop1
	rlf var,f
	btfss STATUS,C
	bcf	Data
	btfsc STATUS,C
	bsf Data
	bsf Clock
	call delClock2
	bcf Clock
	decfsz var2,f
	goto loop1
	bsf latch
	nop
	bcf latch
return
;

counter1
	movlw D'0'				
	subwf variable1,W
	btfsc STATUS,Z
	goto  v0 				; oui
	movlw D'1'				; no
	subwf variable1,W		; =1
	btfsc STATUS,Z		
	goto v1				; yes
	movlw D'2'				; no ;  =2  ?
	subwf variable1,W
	btfsc STATUS,Z
	goto v2				; yes
	movlw D'3'				; no ;  = 3 ?
	subwf variable1,W
	btfsc STATUS,Z
	goto v3				; yes 
	movlw D'4'				; no ;  = 4 ?
	subwf variable1,W
	btfsc STATUS,Z
	goto v4				; yes
	movlw D'5'				; no ;  = 5 ?
	subwf variable1,W
	btfsc STATUS,Z
	goto v5				; yes
	movlw D'6'				; no ;  = 6 ?
	subwf variable1,W
	btfsc STATUS,Z
	goto v6	
		
v0		
					
	movlw b'00000000'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT
	call delClockT	
	incfsz variable1 
	goto counter1


v1		
				
	movlw b'00000001'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT
	call delClockT
	incfsz variable1 
	goto counter1

v2					
	movlw b'00000010'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT		;
	call delClockT
	incfsz variable1 
	goto counter1

v3	
					
	movlw b'00000011'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT	; 
	call delClockT
	incfsz variable1 
	goto counter1

v4	
				
	movlw b'00000100'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT		; )
	call delClockT
	incfsz variable1 
	goto counter1

v5	
						
	movlw b'00000101'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT		; 
	call delClockT
	incfsz variable1 
	goto counter1

v6		
				
	movlw b'00000110'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT		; 
	call delClockT
 ;	incfsz variable1 
	incfsz variable2
	clrf variable1
	movlw b'00000000'
	movwf var
	movlw b'00000001'
	movwf add
	call Send_DT
	
	goto counter2

counter2
	
	
	movlw D'0'				
	subwf variable2,W
	btfsc STATUS,Z
	goto  d0 				; oui
	movlw D'1'
	subwf variable2,W		; =1
	btfsc STATUS,Z		
	goto d1				; yes
	movlw D'2'				; no ;  =2  ?
	subwf variable2,W
	btfsc STATUS,Z
	goto d2				; yes
	movlw D'3'				; no ;  = 3 ?
	subwf variable2,W
	btfsc STATUS,Z
	goto d3				; yes 
	movlw D'4'				; no ;  = 4 ?
	subwf variable2,W
	btfsc STATUS,Z
	goto d4				; yes
	movlw D'5'				; no ;  = 5 ?
	subwf variable2,W
	btfsc STATUS,Z
	goto d5				; yes
	movlw D'6'				; no ;  = 6 ?
	subwf variable2,W
	btfsc STATUS,Z
	goto d6	

d0						
	movlw b'00000000'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT
	incfsz variable2 
	goto counter1


d1	
	clrf variable1				
	movlw b'00000001'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT
	;	incfsz variable1
	goto counter1

d2	
	clrf variable1				
	movlw b'00000010'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT
;	clrf variable1
;	incfsz variable2 
;	incfsz variable1
	goto counter1

d3			
	clrf variable1	
	movlw b'00000011'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT		; 
;	clrf variable1
;	incfsz variable2 
;	incfsz variable1
	goto counter1

d4		
	clrf variable1		
	movlw b'00000100'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT		; )
;	incfsz variable2 
;	incfsz variable1
	goto counter1

d5	
	clrf variable1					
	movlw b'00000101'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT			; 
;	clrf variable1
;	incfsz variable2 
;	incfsz variable1
	goto counter1

d6					
	movlw b'00000110'
	movwf var
	movlw b'00000010'
	movwf add
	call Send_DT
			; 
	
  ;	incfsz variable2 
	return



;
;
;******************************************************************* 
;*******************************************************************   
;
; MAIN program
; ============
;
start
	call Init
start1
	clrf variable1
	clrf variable2
	call counter1	
	goto start1
stop
	clrf variable1	
	

;
;******************************************************************* 
;
; Program complete.
;
	END
